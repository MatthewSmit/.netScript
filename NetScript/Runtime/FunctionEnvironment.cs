using System.Diagnostics;using JetBrains.Annotations;using NetScript.Runtime.Objects;namespace NetScript.Runtime
{
    internal sealed class FunctionEnvironment : DeclarativeEnvironment
    {        private ScriptValue thisValue;
        private ThisBindingStatus thisBindingStatus;
        private readonly ScriptObject homeObject;        public FunctionEnvironment([NotNull] ScriptFunctionObject function, ThisBindingStatus thisBindingStatus, ScriptObject homeObject, ScriptObject newTarget) :            base(function.Agent)        {            FunctionObject = function;            this.thisBindingStatus = thisBindingStatus;            this.homeObject = homeObject;            NewTarget = newTarget;        }        public void BindThisValue(ScriptValue value)        {
            //https://tc39.github.io/ecma262/#sec-bindthisvalue
            Debug.Assert(thisBindingStatus != ThisBindingStatus.Lexical);            if (thisBindingStatus == ThisBindingStatus.Initialised)            {                throw FunctionObject.Agent.CreateReferenceError();            }            thisValue = value;            thisBindingStatus = ThisBindingStatus.Initialised;        }        public override bool HasThisBinding()        {            //https://tc39.github.io/ecma262/#sec-function-environment-records-hasthisbinding            return thisBindingStatus != ThisBindingStatus.Lexical;        }        public override bool HasSuperBinding()        {            //https://tc39.github.io/ecma262/#sec-function-environment-records-hassuperbinding            if (thisBindingStatus == ThisBindingStatus.Lexical)            {                return false;            }            return homeObject != null;        }        public override ScriptValue GetThisBinding()        {
            //https://tc39.github.io/ecma262/#sec-function-environment-records-getthisbinding
            Debug.Assert(thisBindingStatus != ThisBindingStatus.Lexical);            if (thisBindingStatus == ThisBindingStatus.Uninitialised)            {                throw FunctionObject.Agent.CreateReferenceError();            }            return thisValue;        }        public override ScriptValue GetSuperBase()        {            //https://tc39.github.io/ecma262/#sec-getsuperbaseZ            if (homeObject == null)            {                return ScriptValue.Undefined;            }            return homeObject.GetPrototypeOf();        }        [NotNull]        public ScriptFunctionObject FunctionObject { get; }        public ScriptObject NewTarget { get; }    }
}